import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenLocal()
    }
    dependencies {
        classpath 'io.spring.gradle:spring-release-plugin:0.20.1'
        classpath 'com.netflix.nebula:nebula-project-plugin:3.4.0'
    }

    configurations.classpath.resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'
}

plugins {
    id 'java-library'
}

apply plugin: 'java'
apply plugin: 'io.spring.license'
apply plugin: 'io.spring.publishing'

group = 'io.micrometer.keycloak'

description = 'Keycloak SPI providing Micrometer metrics to popular monitoring systems'

repositories {
    mavenCentral()
}

configurations {
    bundleLib
}

dependencies {
    bundleLib 'io.micrometer:micrometer-core:latest.release'
    bundleLib "io.micrometer:micrometer-registry-statsd:latest.release"

    implementation 'io.micrometer:micrometer-core:latest.release'
    implementation "io.micrometer:micrometer-registry-statsd:latest.release"
    implementation 'org.keycloak:keycloak-server-spi-private:latest.release'
    implementation 'org.keycloak:keycloak-server-spi:latest.release'
    implementation 'org.keycloak:keycloak-services:latest.release'
    implementation 'org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.0_spec:1.0.0.Final'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:latest.release'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:latest.release'

    testImplementation 'org.assertj:assertj-core:latest.release'
}

test {
    useJUnitPlatform()
}

contacts {
    'jschneider@pivotal.io' {
        moniker 'Jon Schneider'
        github 'jkschneider'
    }
}

if (project.extensions.findByName('bintray')) {
    bintray.labels = ['micrometer', 'metrics', 'statsd', 'keycloak']
    bintray.packageName = 'micrometer-statsd-keycloak'
}

license {
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
}

wrapper {
    gradleVersion = '5.6.4'
}

jar {
    from {
        configurations.bundleLib.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes(
                'Built-By'       : System.properties['user.name'],
                'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By'     : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                'Version'        : "${gradle.rootProject.version}"
        )
    }
}

defaultTasks 'build'
